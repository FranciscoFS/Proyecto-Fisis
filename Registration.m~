    function [MOVINGREG] = Registration(Movible,Referencia)
%registerImages  Register grayscale images using auto-generated code from Registration Estimator app.
%  [MOVINGREG] = registerImages(MOVING,FIXED) Register grayscale images
%  MOVING and FIXED using auto-generated code from the Registration
%  Estimator app. The values for all registration parameters were set
%  interactively in the app and result in the registered image stored in the
%  structure array MOVINGREG.

% Auto-generated by registrationEstimator app on 24-Aug-2018
%-----------------------------------------------------------


% Default spatial referencing objects

Mascara = Movible.mascara.*(Movible.mascara < 8);

Volumen_referencia = Referencia.vol.orig;
info_ref = Referencia.info;

Volumen_mov = Movible.vol.orig;
info_mov = Movible.info;


fixedRefObj = imref3d(size(Volumen_referencia),info_ref{1,1},info_ref{1,1},info_ref{2,1});
movingRefObj = imref3d(size(Volumen_mov), info_mov{1,1},info_mov{1,1},info_mov{2,1});

% Intensity-based registration

[optimizer, metric] = imregconfig('monomodal');
optimizer.GradientMagnitudeTolerance = 1.00000e-04;
optimizer.MinimumStepLength = 1.00000e-05;
optimizer.MaximumStepLength = 6.25000e-02;
optimizer.MaximumIterations = 100;
optimizer.RelaxationFactor = 0.500000;

% Align centers
fixedCenterXWorld = mean(fixedRefObj.XWorldLimits);
fixedCenterYWorld = mean(fixedRefObj.YWorldLimits);
fixedCenterZWorld = mean(fixedRefObj.ZWorldLimits);
movingCenterXWorld = mean(movingRefObj.XWorldLimits);
movingCenterYWorld = mean(movingRefObj.YWorldLimits);
movingCenterZWorld = mean(movingRefObj.ZWorldLimits);

translationX = fixedCenterXWorld - movingCenterXWorld;
translationY = fixedCenterYWorld - movingCenterYWorld;
translationZ = fixedCenterZWorld - movingCenterZWorld;

% Coarse alignment
initTform = affine3d();
initTform.T(4,1:3) = [translationX, translationY,translationZ];

% Normalize images
movingInit = mat2gray(Volumen_mov);
fixedInit = mat2gray(Volumen_referencia);

% Apply transformation
tform = imregtform(movingInit,movingRefObj,fixedInit,fixedRefObj,...
    'similarity',optimizer,metric,'PyramidLevels',3,'InitialTransformation',initTform);

MOVINGREG.Transformation = tform;
MOVINGREG.RegisteredImage = imwarp(Volumen_mov, movingRefObj, tform, 'OutputView', fixedRefObj, 'SmoothEdges', true);
MOVINGREG.Mascara = 

% Nonrigid registration
[MOVINGREG.DisplacementField,MOVINGREG.RegisteredImage] = imregdemons(MOVINGREG.RegisteredImage,Volumen_referencia,...
    100,'AccumulatedFieldSmoothing',1.0,'PyramidLevels',3);

% Store spatial referencing object
MOVINGREG.SpatialRefObj = fixedRefObj;

end

